{"version":3,"sources":["components/column.js","components/cell.js","components/grid.js","components/caption.js","components/restart-button.js","constants.js","components/app.js","serviceWorker.js","index.js"],"names":["Column","_ref","renderCell","columnLength","cells","i","push","react_default","a","createElement","className","Cell","sign","onClick","Grid","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","renderGrid","columnIndex","_this$props","props","columns","rowIndex","cell_Cell","key","renderColumn","column_Column","inherits","createClass","value","Component","Caption","children","RestartButton","gameOver","EMPTY","ROWS_NUMBER","COLUMNS_NUMBER","App","getEmptyGrid","grid","j","state","isOddTurn","isVictory","isDraw","getLines","bind","assertThisInitialized","onTurn","hasWon","hasFilled","restart","renderText","_this$state","lastIndexOf","newColumns","isFull","setState","prevState","lines","combo","repeat","some","line","join","includes","arr","lastRow","forEach","column","indexOf","toConsumableArray","y","newRow","x","newDiagonal","NUM_TO_WIN","_this$state2","grid_Grid","caption_Caption","restart_button_RestartButton","Boolean","window","location","hostname","match","ReactDOM","render","components_app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d0ee9d94.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./column.css\";\r\n\r\nexport const Column = ({ renderCell, columnLength }) => {\r\n\r\n    const cells = []\r\n\r\n    for (let i = 0; i < columnLength; i++) {\r\n        cells.push(renderCell(i))\r\n    }\r\n\r\n    return (\r\n        <div className=\"Column\">\r\n            { cells }\r\n        </div>\r\n    );\r\n\r\n}","import React from 'react';\r\nimport \"./cell.css\";\r\n\r\nexport const Cell = ({ sign, onClick}) => {\r\n    return (\r\n        <button className={\"Cell \" + sign} onClick={onClick}></button>\r\n    );\r\n}","import React, { Component } from 'react';\r\nimport { Column } from './column';\r\nimport { Cell } from './cell';\r\nimport \"./grid.css\";\r\n\r\nexport class Grid extends Component {\r\n\r\n  renderGrid = (columnIndex) => {\r\n    const { columns, onClick } = this.props;\r\n    return (rowIndex) => {\r\n      return (\r\n      <Cell sign={ columns[columnIndex][rowIndex] } \r\n            onClick={ () => { onClick(columnIndex) } } \r\n            key={`[${columnIndex}][${rowIndex}]`}/>\r\n      );\r\n    }\r\n  }\r\n\r\n  renderColumn = (columnIndex) => {\r\n    const columnLength = this.props.columns[0].length;\r\n    return <Column renderCell={ this.renderGrid(columnIndex) } \r\n                   columnLength={columnLength} \r\n                   key={columnIndex} />\r\n  }\r\n\r\n  render() {\r\n      const columns = [];\r\n      \r\n      for (let i = 0; i < this.props.columns.length; i++) {\r\n          columns.push(this.renderColumn(i));\r\n      };\r\n      \r\n      return (\r\n          <div className=\"Grid\">\r\n              { columns }\r\n          </div>\r\n      )\r\n  }\r\n}","import React from 'react';\r\nimport \"./caption.css\";\r\n\r\nexport const Caption = ({ children }) => {\r\n    return (\r\n        <div className=\"Caption\">\r\n            <h2 className=\"Caption-Text\">\r\n              {children}\r\n            </h2>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport \"./restart-button.css\";\r\n\r\nexport const RestartButton = ({ onClick, gameOver }) => {\r\n\r\n    if (!gameOver) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <button className=\"RestartButton\" onClick={onClick}>Играть ещё раз</button>\r\n    );  \r\n}","const EMPTY = \"white\";\r\nconst PLAYER1 = \"red\";\r\nconst PLAYER2 = \"blue\";\r\nconst ROWS_NUMBER = 6;\r\nconst COLUMNS_NUMBER = 7;\r\nconst NUM_TO_WIN = 4;\r\n\r\nexport { EMPTY, PLAYER1, PLAYER2, ROWS_NUMBER, COLUMNS_NUMBER, NUM_TO_WIN };","import React, { Component } from \"react\";\nimport { Grid } from \"./grid\";\nimport { Caption } from \"./caption\";\nimport { RestartButton } from \"./restart-button\";\nimport { EMPTY, PLAYER1, PLAYER2, ROWS_NUMBER, COLUMNS_NUMBER, NUM_TO_WIN } from \"../constants\";\nimport \"./app.css\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.getEmptyGrid = () => {\n      // получает пустое поле с размерами, заданными в файле constants.js\n      // эти размеры можно поменять и, например, запустить игру на поле 10х10\n\n      const grid = [];\n      for (let i = 0; i < COLUMNS_NUMBER; i++) {\n        grid[i] = [];\n        for (let j = 0; j < ROWS_NUMBER; j++) {\n            grid[i].push(EMPTY);\n          }\n      }\n      return grid;\n    }\n\n    this.state = {\n      columns: this.getEmptyGrid(),\n      isOddTurn: true,\n      isVictory: false,\n      isDraw: false,\n    }\n\n    this.getLines = this.getLines.bind(this);\n    this.onTurn = this.onTurn.bind(this);\n    this.hasWon = this.hasWon.bind(this);\n    this.hasFilled = this.hasFilled.bind(this);\n    this.restart = this.restart.bind(this);\n    this.renderText = this.renderText.bind(this);\n  }\n\n  onTurn(columnIndex) {\n    // проверяет, можно ли ходить, делает ход,\n    // вызывает функции, вычисляющие победу или заполнение поля\n    // и обновляет состояние\n\n    if (this.state.isVictory || this.state.isDraw) {\n      return;\n    }\n    \n    const { columns, isOddTurn } = this.state;\n    const rowIndex = columns[columnIndex].lastIndexOf(EMPTY);\n    const sign = isOddTurn ? PLAYER1 : PLAYER2;\n\n    if (rowIndex === -1) {\n        return;\n    } else {\n        let newColumns = [];\n        for (let i = 0; i < columns.length; i++) {\n            newColumns[i] = [];\n            for (let j = 0; j < columns[0].length; j++) {\n              newColumns[i][j] = columns[i][j];\n            }\n        }\n        newColumns[columnIndex][rowIndex] = sign;\n\n        const isVictory = this.hasWon(this.getLines(newColumns), sign)\n        const isFull = this.hasFilled(newColumns);\n\n        this.setState((prevState) => {\n          return {\n            isOddTurn: !prevState.isOddTurn,\n            columns: newColumns,\n            isVictory: isVictory,\n            isDraw: !isVictory && isFull,\n          }\n        })\n    }\n  };\n\n  hasWon(lines, sign) {\n    const combo = sign.repeat(NUM_TO_WIN) \n    // число фишек в ряд для победы также можно изменить в файле constants.js\n    return lines.some((line) => {\n        return line.join(\"\").includes(combo);\n    })\n  }\n\n  hasFilled(arr) {\n    const lastRow = [];\n    arr.forEach((column) => {\n      lastRow.push(column[0]);\n    });\n    if (lastRow.indexOf(EMPTY) === -1) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  restart() {\n    this.setState(\n      {\n        columns: this.getEmptyGrid(), \n        isOddTurn: true,\n        isVictory: false,\n        isDraw: false,\n      }\n    );\n  }\n\n  getLines(arr) {\n    // получает все возможные для поля этого размера линии,\n    // на которых может поместиться число фишек, достаточное для победы (NUM_TO_WIN)\n\n    const lines = [];\n\n    arr.forEach((column) => lines.push([...column]));\n\n    for (let y = 0; y < arr[0].length; y++) {\n        let newRow = [];\n        for (let x = 0; x < arr.length; x++) {\n            newRow.push(arr[x][y]);\n        }\n        lines.push(newRow);\n    }\n    for (let i = 0; i < arr.length - (NUM_TO_WIN - 1); i++) {\n        let newDiagonal = [];\n        for (let x = i, y = 0; x < arr.length && y < arr[0].length; x++, y++) {\n            newDiagonal.push(arr[x][y]);\n        };\n        lines.push(newDiagonal);\n    }\n    for (let i = arr.length - 1; i >= (NUM_TO_WIN - 1); i--) {\n        let newDiagonal = [];\n        for (let x = i, y = 0; x >= 0 && y < arr[0].length; x--, y++) {\n            newDiagonal.push(arr[x][y]);\n        };\n        lines.push(newDiagonal);\n    }\n    for (let i = 1; i < arr[0].length - (NUM_TO_WIN - 1); i++) {\n        let newDiagonal = [];\n        for (let x = 0, y = i; y < arr[0].length; x++, y++) {\n            newDiagonal.push(arr[x][y]);\n        };\n        lines.push(newDiagonal);\n    }\n    for (let i = 1; i < arr[0].length - (NUM_TO_WIN - 1); i++) {\n        let newDiagonal = [];\n        for (let x = arr.length - 1, y = i; y < arr[0].length; x--, y++) {\n            newDiagonal.push(arr[x][y]);\n        };\n        lines.push(newDiagonal);\n    }\n\n    return lines;\n  }\n\n  renderText(isOddTurn, isVictory, isDraw) {\n    if (isDraw) {\n      return \"Ничья!\"\n    }\n    if (isVictory) {\n      if (isOddTurn) {\n        return \"Победил синий игрок!\";\n      } else {\n        return \"Победил красный игрок!\";\n      }\n    } else {\n      if (isOddTurn) {\n        return \"Ходит красный игрок\";\n      } else {\n        return \"Ходит синий игрок\";\n      }\n    }\n  }\n\n  render() {\n\n    const { columns, isOddTurn, isVictory, isDraw } = this.state;\n    const gameOver = isVictory || isDraw;\n\n    return (\n      <div className=\"App\">\n        <Grid columns={columns} onClick={this.onTurn} />\n        <Caption>\n          { this.renderText(isOddTurn, isVictory, isDraw) }\n        </Caption>\n        <RestartButton onClick={this.restart} gameOver={gameOver} />\n      </div>\n    );\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/app\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}